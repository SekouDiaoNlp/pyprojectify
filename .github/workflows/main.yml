name: "Use setuptools to build package and run multiple tests"

on: [ push, pull_request ]

jobs:
    build_wheels_with_setuptools:
        name: Build setuptool packages on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-latest, windows-latest, macos-latest ]
                include:
                    -   os: ubuntu-latest
                        path: ~/.cache/pip
                    -   os: macos-latest
                        path: ~/Library/Caches/pip
                    -   os: windows-latest
                        path: ~\AppData\Local\pip\Cache
                python-version: [ 3.6, 3.7, 3.8, 3.9, '3.10' ]

        steps:
            -   uses: actions/checkout@v2

            -   uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}

            -   uses: actions/cache@v2
                with:
                    path: ${{ matrix.path }}
                    key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements_dev.txt') }}
            -   name: Install dependencies
                run: |
                    python -m pip install wheel pytest pytest-cov codecov pandas pyxlsb types-setuptools
                    pip install -r requirements_dev.txt
            -   name: Build wheel using pip
                run: pip wheel -w DEST_DIR .
                  # to supply options, put them in 'env', like:
                  # env:
                #   CIBW_SOME_OPTION: value
            -   name: Build package using setup.py
                run: |
                    python setup.py sdist bdist_wheel
            -   name: Check distributions
                run: twine check dist/*
                if: ${{ matrix.python-version != '3.10' }} # twine is not yet compatible with python 3.10.0
            -   name: Run bandit
                run: bandit -r pyprojectify/ -c .bandit.yml
                if: ${{ matrix.os != 'macos-latest' }}
            -   name: Run Typechecker
                run:  |
                    python -m pip install types-setuptools
                    python -m pip install types-toml
                    mypy --strict --ignore-missing-imports --show-error-codes pyprojectify/
            -   name: Run PyTest with coverage
                run: |
                    py.test --cov=./pyprojectify/
#            -   name: Upload coverage artifacts to codecov
#                run: codecov --token=370386ee-28d7-441f-b4eb-7f63f8c5c3e9
#                if: ${{ matrix.python-version != '3.10' }} # codecov is not yet compatible with python 3.10.0

